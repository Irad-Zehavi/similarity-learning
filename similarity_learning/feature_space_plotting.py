# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/feature_space_plotting.ipynb.

# %% auto 0
__all__ = ['FeatureSpaceFigure']

# %% ../nbs/feature_space_plotting.ipynb 5
import numpy as np
from fastai.vision.all import *
import matplotlib.pyplot as plt

# %% ../nbs/feature_space_plotting.ipynb 6
class FeatureSpaceFigure(object):
    def __init__(self, lim=None):
        self.fig: plt.Figure = plt.figure()
        self.ax = self.fig.add_subplot()
        if lim:
            self.ax.set_xlim(-lim, lim)
            self.ax.set_ylim(-lim, lim)
            self.ax.set_zlim(-lim, lim)

    def plot_sphere(self, equatorial_plane=False):
        phi, theta = np.mgrid[0.0:np.pi:100j, 0.0:2.0*np.pi:100j]
        x = np.sin(phi)*np.cos(theta)
        y = np.sin(phi)*np.sin(theta)
        z = np.cos(phi)

        self.ax.plot_surface(x, y, z, rcount=20, ccount=20, alpha=.3, color='white')

        if equatorial_plane:
            self.ax.plot_surface(x, y, 0*z, rcount=20, ccount=20, alpha=.15, color='white')

    def plot_dataset_embedding(self, dataset: Datasets, feature_extractor, num_samples_per_class=300, normalize_features=False, *args, **kwargs):
        COLORS = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']

        feature_extractor.eval()

        with torch.no_grad():
            for c, ss in dataset.by_target.items():
                color = COLORS[dataset.vocab.o2i[c] % len(COLORS)]
                samples = ss.random_sub_dsets(num_samples_per_class).load()[0]
                embeddings = feature_extractor(samples)
                if normalize_features:
                    embeddings = torch.nn.functional.normalize(embeddings, dim=1)

                self._plot_cluster(embeddings.cpu().numpy(), color, label=c, *args, **kwargs)

        self.ax.legend()

    def _plot_cluster(self, points: ndarray, color, *args, **kwargs):
        assert points.ndim == 2 and points.shape[1] == 2
        self.ax.scatter(*points.transpose(), color=color, *args, **kwargs)
